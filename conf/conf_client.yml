####################################
###   client_config_map config   ###
####################################

instance_id: cf95a5a62a7da7e5317a77bb3bdc4ef249a63402

log_level: DEBUG

debug_console: true

strategy_report_interval: 900.0

logger_override_whitelist:
- hummingbot.strategy.arbitrage
- hummingbot.strategy.cross_exchange_market_making
- conf

log_file_path: /Users/edoardofoco/Documents/Projects/Personal/hummingbot/logs

kill_switch_mode: {}

# What to auto-fill in the prompt after each import command (start/config)
autofill_import: disabled

telegram_mode: {}

# MQTT Bridge configuration.
mqtt_bridge:
  mqtt_host: localhost
  mqtt_port: 1883
  mqtt_username: ''
  mqtt_password: ''
  mqtt_namespace: hbot
  mqtt_ssl: false
  mqtt_logger: true
  mqtt_notifier: true
  mqtt_commands: true
  mqtt_events: true
  mqtt_autostart: false

# Error log sharing
send_error_logs: true

# Can store the previous strategy ran for quick retrieval.
previous_strategy: paper-amm-rebus-3.yml

# Advanced database options, currently supports SQLAlchemy's included dialects
# Reference: https://docs.sqlalchemy.org/en/13/dialects/
# To use an instance of SQLite DB the required configuration is 
#   db_engine: sqlite
# To use a DBMS the required configuration is
#   db_host: 127.0.0.1
#   db_port: 3306
#   db_username: username
#   db_password: password
#   db_name: dbname
db_mode:
  db_engine: postgresql
  db_host: hummingbot.cun46d6aut7m.eu-west-1.rds.amazonaws.com
  db_port: 5432
  db_username: postgres
  db_password: Hs0%!fB5WT^i
  db_name: hummingbot

pmm_script_mode: {}

# Balance Limit Configurations
# e.g. Setting USDT and BTC limits on Binance.
# balance_asset_limit:
#   binance:
#     BTC: 0.1
#     USDT: 1000
balance_asset_limit:
  ciex: {}
  whitebit: {}
  loopring: {}
  ndax: {}
  k2: {}
  binance: {}
  gate_io_paper_trade: {}
  ndax_testnet: {}
  lbank: {}
  huobi: {}
  bitmex: {}
  bybit: {}
  mexc: {}
  binance_us: {}
  crypto_com: {}
  kucoin_testnet: {}
  probit_kr: {}
  hitbtc: {}
  ascend_ex_paper_trade: {}
  binance_paper_trade: {}
  kraken: {}
  bitmart: {}
  bybit_testnet: {}
  mock_paper_exchange: {}
  bitmex_testnet: {}
  bitfinex: {}
  okx: {}
  ascend_ex: {}
  gate_io: {}
  coinbase_pro: {}
  altmarkets: {}
  kucoin_paper_trade: {}
  probit: {}
  kucoin: {}
  bittrex: {}

# Fixed gas price (in Gwei) for Ethereum transactions
manual_gas_price: 50.0

# Gateway API Configurations
# default host to only use localhost
# Port need to match the final installation port for Gateway
gateway:
  gateway_api_host: localhost
  gateway_api_port: '15888'

# Certs Configurations
# default: use the client generated certs
# Port need to match the certifactes for Gateway
certs:
  path: ''

# Whether to enable aggregated order and trade data collection
anonymized_metrics_mode:
  anonymized_metrics_interval_min: 15.0

# Command Shortcuts
# Define abbreviations for often used commands
# or batch grouped commands together
command_shortcuts:
- command: spreads
  help: Set bid and ask spread
  arguments:
  - Bid Spread
  - Ask Spread
  output:
  - config bid_spread $1
  - config ask_spread $2

# A source for rate oracle, currently ascend_ex, binance, coin_gecko, kucoin, gate_io
rate_oracle_source:
  name: binance

# A universal token which to display tokens values in, e.g. USD,EUR,BTC
global_token:
  global_token_name: USD
  global_token_symbol: $

# Percentage of API rate limits (on any exchange and any end point) allocated to this bot instance.
# Enter 50 to indicate 50%. E.g. if the API rate limit is 100 calls per second, and you allocate 
# 50% to this setting, the bot will have a maximum (limit) of 50 calls per second
rate_limits_share_pct: 100.0

commands_timeout:
  create_command_timeout: 10.0
  other_commands_timeout: 30.0

# Tabulate table format style (https://github.com/astanin/python-tabulate#table-format)
tables_format: psql

paper_trade:
  paper_trade_exchanges:
  - binance
  - kucoin
  - ascend_ex
  - gate_io
  - mexc
  - bitmart
  paper_trade_account_balance:
    BTC: 1.0
    USDT: 1000.0
    ONE: 1000.0
    USDQ: 1000.0
    TUSD: 1000.0
    ETH: 10.0
    WETH: 10.0
    USDC: 1000.0
    DAI: 1000.0
    REBUS: 1000.0

color:
  top_pane: '#000000'
  bottom_pane: '#000000'
  output_pane: '#262626'
  input_pane: '#1C1C1C'
  logs_pane: '#121212'
  terminal_primary: '#5FFFD7'
  primary_label: '#5FFFD7'
  secondary_label: '#FFFFFF'
  success_label: '#5FFFD7'
  warning_label: '#FFFF00'
  info_label: '#5FD7FF'
  error_label: '#FF0000'
  gold_label: '#FFD700'
  silver_label: '#C0C0C0'
  bronze_label: '#CD7F32'

# The tick size is the frequency with which the clock notifies the time iterators by calling the
# c_tick() method, that means for example that if the tick size is 1, the logic of the strategy 
# will run every second.
tick_size: 1.0
